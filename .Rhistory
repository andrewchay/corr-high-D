library("CCSparsenet")
set.seed = 123
setwd("D:/Lecture/Homework/291/corr-high-D")
matrix_vec = function(P){
tmp = matrix(rep(0, P * P), nrow = P)
for (i in 1:P)
for (j in 1:P)
if (i == j) tmp[i, j] = 1 else
tmp[i, j] = (rho) ^ abs(i - j)
#tmp[i, j] = rho
return(tmp)
}
matrix_move <- function(N, P, q, ratio)
# ratio controls the number of columns to be shifted
# q is the bandwidth
{
pr <- round(P * ratio)
ind = sort(sample(P)[1:pr])
tmp <- matrix(rnorm(N * length(ind)), nrow = N)
M <- matrix(0, N, P)
M[, ind] <- tmp
tmp <- M
M <- cbind(matrix(rep(0, N * q), nrow = N), M, matrix(rep(0, N * q), nrow = N))
for (i in c(seq(-q, -1), seq(1, q)))
tmp <- tmp + M[, (q + i + 1):(q + i + P)]
return(tmp)
}
cov0 <- function(N, P)
{
matrix(rnorm(N * P, 0, 1), nrow = N)
}
cov1 <- function(N, P, rho = 0.5) # generate the covariates from multivariate normal
{
X = mvrnorm(N, rep(0, P), Sigma = matrix(matrix_vec(P), ncol = P))
}
cov2 <- function(N, P, ratio = 0.1, a = 2, q = 3) # generate the covariates from latent variables
{
matrix(rnorm(N * P, 0, 1), nrow = N) + a * matrix_move(N, P, q, ratio)
}
N = 100
P = 100
num.simu = 20
beta0 = c(3, 1, -1, -3)
n.beta0 = length(beta0)
num.zeros = P - n.beta0
beta = c(beta0, rep(0, num.zeros))
non.zero.index = (beta != 0)
cov0(N, P)
mu = as.vector(crossprod(t(X), beta))
center = "Old"
sn = 1.5
X = cov0(N, P)
mu = as.vector(crossprod(t(X), beta))
center = "Old"
sn = 1.5
# This simulation compares all three methods. dlasso stands for double LASSO and post estimation method. scaled is the scaled LASSO by Zhang and partEst is our method.
library("ggplot2")
setwd("D:/Lecture/Homework/291/corr-high-D")
source("data-generation.R")
source("CDA.R")
####simulate with 500 datesets ####
Oracle = c()
cv_mcp = c()
cv_lasso = c()
stat.names = c("Ltype1", "Ltype2", "LFDR", "LFIR", "LL1", "LL2", "LXL1", "LXL2",
"Mtype1", "Mtype2", "MFDR", "MFIR", "ML1", "ML2", "MXL1", "MXL2")
stats = c()
lasso.lam = c()
mcp.lam = c()
Ltype1 = c()
Ltype2 = c()
LFDR = c()
LFIR = c()
Mtype1 = c()
Mtype2 = c()
MFDR = c()
MFIR = c()
LL1 = c()
LL2 = c()
LXL1 = c()
LXL2 = c()
ML1 = c()
ML2 = c()
MXL1 = c()
MXL2 = c()
for (i in 1:num.simu)
{
e = rnorm(N, 0, sd(mu) / sqrt(sn))
y = mu + e
res0 = lm(y ~ X[, non.zero.index] - 1)
res1 = CDgrid(X, y)
Oracle = cbind(Oracle, res0$coef[1:n.beta0])
cv_mcp = cbind(cv_mcp, res1$beta_mcp)
cv_lasso = cbind(cv_lasso, res1$beta_lasso)
lasso.lam = c(lasso.lam, res1$lasso.lam)
mcp.lam = c(mcp.lam, res1$mcp.lam)
Ltype1 = c(Ltype1, res1$Ltype1)
Ltype2 = c(Ltype2, res1$Ltype2)
LFDR = c(LFDR, res1$LFDR)
LFIR = c(LFIR, res1$LFIR)
Mtype1 = c(Mtype1, res1$Mtype1)
Mtype2 = c(Mtype2, res1$Mtype2)
MFDR = c(MFDR, res1$MFDR)
MFIR = c(MFIR, res1$MFIR)
LL1 = c(LL1, res1$LL1)
LL2 = c(LL2, res1$LL2)
LXL1 = c(LXL1, res1$LXL1)
LXL2 = c(LXL2, res1$LXL2)
ML1 = c(ML1, res1$ML1)
ML2 = c(ML2, res1$ML2)
MXL1 = c(MXL1, res1$MXL1)
MXL2 = c(MXL2, res1$MXL2)
stats = rbind(stats, res1$stats)
print(paste(i, " out of ", num.simu))
}
Oracle = Oracle - beta0
cv_mcp = cv_mcp - beta
cv_lasso = cv_lasso - beta
stats = data.frame(stats)
pmatrix1 = matrix(rep(0, 5 * 5), nrow = 5)
pmatrix1[1, 1] = round(mean(abs(cv_mcp)), 2)
pmatrix1[2, 1] = round(mean(abs(cv_lasso)), 2)
pmatrix1[5, 1] = round(mean(abs(Oracle)), 2)
pmatrix1[1, 5] = round(sd(as.numeric(cv_mcp)), 2)
pmatrix1[2, 5] = round(sd(as.numeric(cv_lasso)), 2)
pmatrix1[5, 5] = round(sd(as.numeric(Oracle)), 2)
colnames(pmatrix1) = c("Bias", "SD", "MSE",
"Coverage", "Simulation SD")
rownames(pmatrix1) = c("OLS CV MCP", "OLS CV LASSO",
"ILS CV MCP", "ILS CV LASSO",
"Oracle")
plot(stats$Mtype1 ~ stats$lambda, pch = 1, col = 4, pty = 1, cex = .5)
points(stats$Ltype1 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
plot(stats$MFDR ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
points(stats$LFDR ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
plot(stats$Mtype2 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
points(stats$Ltype2 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
plot(stats$MFIR ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
points(stats$LFIR ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
plot(stats$MFDR ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
points(stats$LFDR ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
plot(stats$MFIR ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
points(stats$LFIR ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
plot(stats$ML1 ~ stats$lambda, pch = 1, col = 4, pty = 1, cex = .5)
points(stats$LL1 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
plot(stats$ML2 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
points(stats$LL2 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
?loess
loess(ML1 ~ lambda, stats)
plot(loess(ML1 ~ lambda, stats))
summary(loess(ML1 ~ lambda, stats))
plot(stats$ML1 ~ stats$lambda, pch = 1, col = 4, pty = 1, cex = .5)
lines(loess(ML1 ~ lambda, stats))
plot(stats$ML1 ~ stats$lambda, pch = 1, col = 4, pty = 1, cex = .5)
lines(lowess(ML1 ~ lambda, stats))
lines(lowess(lambda, ML1))
lines(lowess(stats$lambda, stats$ML1))
lines(lowess(stats$lambda, stats$ML1, f = 0.2), col = 1)
lines(lowess(stats$lambda, stats$LL1, f = 0.2), col = 1)
lines(lowess(stats$lambda, stats$ML1, f = 0.2), col = 1)
lines(lowess(stats$lambda, stats$LL1, f = 0.2), col = 2)
plot(lowess(stats$lambda, stats$ML1, f = 0.2), col = 1)
lines(lowess(stats$lambda, stats$LL1, f = 0.2), col = 2)
qplot(data = stats, ML1, lambda)
qplot(data = stats, lambda, ML1)
qplot(data = stats, lambda, ML1) + geom_smooth(method = "loess")
qplot(data = stats, lambda, ML1) + geom_smooth(method = "loess", size = 1.5)
?geom_smooth
qplot(data = stats, lambda, ML1) + geom_smooth(method = "loess", size = 1.5) +
geom_points(data = stats, lambda, LL1) + geom_smooth(aes(x = lambda, y = LL1))
?geom_points
?geom_point
qplot(data = stats, lambda, ML1) + geom_smooth(method = "loess", size = 1.5) +
geom_point(data = stats, lambda, LL1) + geom_smooth(aes(x = lambda, y = LL1))
qplot(data = stats, lambda, ML1) + geom_smooth(method = "loess", size = 1.5) +
geom_point(data = stats, aes(x = lambda, y = LL1)) + geom_smooth(aes(x = lambda, y = LL1))
lines(lowess(stats$lambda, stats$LL1, f = 0.2), col = 2)
qplot(data = stats, lambda, ML1) + geom_smooth(method = "loess", size = 1.5)
?melt
??melt
library(reshape)
library("reshape")
?melt
melt(stats, id = c("lambda"))
head(melt(stats, id = c("lambda")))
tmp.data = head(melt(stats, id = c("lambda")))
tmp.data = melt(stats, id = c("lambda"))
qplot(data = tmp.data, aes(x = lambda, y = value))
qplot(data = tmp.data, aes(x = lambda, y = value)) + geom_smooth(method = "loess", size = 1.5)
ggplot(data = tmp.data, aes(x = lambda, y = value))
names(tmp.data)
qplot(data = tmp.data, aes(x = lambda, y = value)) + geom_smooth(method = "loess", size = 1.5)
dim(tmp.data)
qplot(data = tmp.data, aes(x = lambda, y = value)) + geom_line(aes(colour=variable, group=variable))
qplot(data = tmp.data, aes(x = lambda, y = value)) + geom_line(aes(group=variable))
tmp.data$lambda
dim(tmp.data)
qplot(data = tmp.data, aes(x = "lambda", y = "value")) + geom_line(aes(group=variable))
qplot(data = tmp.data, aes(x = "lambda", y = "value")) + geom_smooth(method = "loess", size = 1.5)
ggplot(data = tmp.data, aes(x = "lambda", y = "value")) + geom_smooth(method = "loess", size = 1.5)
ggplot(data = tmp.data, aes(x = lambda, y = value)) + geom_smooth(method = "loess", size = 1.5)
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) + geom_smooth(method = "loess", size = 1.5)
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, colour = group)
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, colour = variable)
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable))
tmp.data = melt(stats[, 1:8], id = c("lambda"))
tmp.data = melt(stats[, c(1:8, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable))
tmp.data = melt(stats[, c(1:4, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable))
?geom_smooth
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5)
mean(lasso.lam)
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_ablinee(v = mean(lasso.lam))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_abline(v = mean(lasso.lam))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
names(stats)
tmp.data = melt(stats[, c(5:8, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
tmp.data = melt(stats[, c(9:14, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(15:20, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
?cv.sparsenet
# This simulation compares all three methods. dlasso stands for double LASSO and post estimation method. scaled is the scaled LASSO by Zhang and partEst is our method.
library("ggplot2")
library("reshape")
setwd("D:/Lecture/Homework/291/corr-high-D")
source("data-generation.R")
source("CDA.R")
####simulate with 500 datesets ####
Oracle = c()
cv_mcp = c()
cv_lasso = c()
stat.names = c("Ltype1", "Ltype2", "LFDR", "LFIR", "LL1", "LL2", "LXL1", "LXL2",
"Mtype1", "Mtype2", "MFDR", "MFIR", "ML1", "ML2", "MXL1", "MXL2")
stats = c()
lasso.lam = c()
mcp.lam = c()
Ltype1 = c()
Ltype2 = c()
LFDR = c()
LFIR = c()
Mtype1 = c()
Mtype2 = c()
MFDR = c()
MFIR = c()
LL1 = c()
LL2 = c()
LXL1 = c()
LXL2 = c()
ML1 = c()
ML2 = c()
MXL1 = c()
MXL2 = c()
for (i in 1:num.simu)
{
e = rnorm(N, 0, sd(mu) / sqrt(sn))
y = mu + e
res0 = lm(y ~ X[, non.zero.index] - 1)
res1 = CDgrid(X, y)
Oracle = cbind(Oracle, res0$coef[1:n.beta0])
cv_mcp = cbind(cv_mcp, res1$beta_mcp)
cv_lasso = cbind(cv_lasso, res1$beta_lasso)
lasso.lam = c(lasso.lam, res1$lasso.lam)
mcp.lam = c(mcp.lam, res1$mcp.lam)
Ltype1 = c(Ltype1, res1$Ltype1)
Ltype2 = c(Ltype2, res1$Ltype2)
LFDR = c(LFDR, res1$LFDR)
LFIR = c(LFIR, res1$LFIR)
Mtype1 = c(Mtype1, res1$Mtype1)
Mtype2 = c(Mtype2, res1$Mtype2)
MFDR = c(MFDR, res1$MFDR)
MFIR = c(MFIR, res1$MFIR)
LL1 = c(LL1, res1$LL1)
LL2 = c(LL2, res1$LL2)
LXL1 = c(LXL1, res1$LXL1)
LXL2 = c(LXL2, res1$LXL2)
ML1 = c(ML1, res1$ML1)
ML2 = c(ML2, res1$ML2)
MXL1 = c(MXL1, res1$MXL1)
MXL2 = c(MXL2, res1$MXL2)
stats = rbind(stats, res1$stats)
print(paste(i, " out of ", num.simu))
}
Oracle = Oracle - beta0
cv_mcp = cv_mcp - beta
cv_lasso = cv_lasso - beta
stats = data.frame(stats)
pmatrix1 = matrix(rep(0, 5 * 5), nrow = 5)
pmatrix1[1, 1] = round(mean(abs(cv_mcp)), 2)
pmatrix1[2, 1] = round(mean(abs(cv_lasso)), 2)
pmatrix1[5, 1] = round(mean(abs(Oracle)), 2)
pmatrix1[1, 5] = round(sd(as.numeric(cv_mcp)), 2)
pmatrix1[2, 5] = round(sd(as.numeric(cv_lasso)), 2)
pmatrix1[5, 5] = round(sd(as.numeric(Oracle)), 2)
colnames(pmatrix1) = c("Bias", "SD", "MSE",
"Coverage", "Simulation SD")
rownames(pmatrix1) = c("OLS CV MCP", "OLS CV LASSO",
"ILS CV MCP", "ILS CV LASSO",
"Oracle")
# plot(stats$Mtype1 ~ stats$lambda, pch = 1, col = 4, pty = 1, cex = .5)
# points(stats$Ltype1 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$Mtype2 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$Ltype2 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$MFDR ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LFDR ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$MFIR ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LFIR ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
#
# plot(stats$ML1 ~ stats$lambda, pch = 1, col = 4, pty = 1, cex = .5)
# points(stats$LL1 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$ML2 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LL2 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$MXL1 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LXL1 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$MXL2 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LXL2 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
tmp.data = melt(stats[, c(1:4, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(5:8, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
tmp.data = melt(stats[, c(9:14, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(15:20, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
names(stats)
tmp.data = melt(stats[, c(16:18, 20, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
tmp.data = melt(stats[, c(9:12, 14, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(9:14, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(10:12, 14, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(9:14, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(15:20, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
tmp.data = melt(stats[, c(16:18, 20, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
tmp.data = melt(stats[, c(1:4, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(5:8, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
# This simulation compares all three methods. dlasso stands for double LASSO and post estimation method. scaled is the scaled LASSO by Zhang and partEst is our method.
library("ggplot2")
library("reshape")
setwd("D:/Lecture/Homework/291/corr-high-D")
source("data-generation.R")
source("CDA.R")
####simulate with 500 datesets ####
Oracle = c()
cv_mcp = c()
cv_lasso = c()
stat.names = c("Ltype1", "Ltype2", "LFDR", "LFIR", "LL1", "LL2", "LXL1", "LXL2",
"Mtype1", "Mtype2", "MFDR", "MFIR", "ML1", "ML2", "MXL1", "MXL2")
stats = c()
lasso.lam = c()
mcp.lam = c()
Ltype1 = c()
Ltype2 = c()
LFDR = c()
LFIR = c()
Mtype1 = c()
Mtype2 = c()
MFDR = c()
MFIR = c()
LL1 = c()
LL2 = c()
LXL1 = c()
LXL2 = c()
ML1 = c()
ML2 = c()
MXL1 = c()
MXL2 = c()
for (i in 1:num.simu)
{
e = rnorm(N, 0, sd(mu) / sqrt(sn))
y = mu + e
res0 = lm(y ~ X[, non.zero.index] - 1)
res1 = CDgrid(X, y)
Oracle = cbind(Oracle, res0$coef[1:n.beta0])
cv_mcp = cbind(cv_mcp, res1$beta_mcp)
cv_lasso = cbind(cv_lasso, res1$beta_lasso)
lasso.lam = c(lasso.lam, res1$lasso.lam)
mcp.lam = c(mcp.lam, res1$mcp.lam)
Ltype1 = c(Ltype1, res1$Ltype1)
Ltype2 = c(Ltype2, res1$Ltype2)
LFDR = c(LFDR, res1$LFDR)
LFIR = c(LFIR, res1$LFIR)
Mtype1 = c(Mtype1, res1$Mtype1)
Mtype2 = c(Mtype2, res1$Mtype2)
MFDR = c(MFDR, res1$MFDR)
MFIR = c(MFIR, res1$MFIR)
LL1 = c(LL1, res1$LL1)
LL2 = c(LL2, res1$LL2)
LXL1 = c(LXL1, res1$LXL1)
LXL2 = c(LXL2, res1$LXL2)
ML1 = c(ML1, res1$ML1)
ML2 = c(ML2, res1$ML2)
MXL1 = c(MXL1, res1$MXL1)
MXL2 = c(MXL2, res1$MXL2)
stats = rbind(stats, res1$stats)
print(paste(i, " out of ", num.simu))
}
Oracle = Oracle - beta0
cv_mcp = cv_mcp - beta
cv_lasso = cv_lasso - beta
stats = data.frame(stats)
pmatrix1 = matrix(rep(0, 5 * 5), nrow = 5)
pmatrix1[1, 1] = round(mean(abs(cv_mcp)), 2)
pmatrix1[2, 1] = round(mean(abs(cv_lasso)), 2)
pmatrix1[5, 1] = round(mean(abs(Oracle)), 2)
pmatrix1[1, 5] = round(sd(as.numeric(cv_mcp)), 2)
pmatrix1[2, 5] = round(sd(as.numeric(cv_lasso)), 2)
pmatrix1[5, 5] = round(sd(as.numeric(Oracle)), 2)
colnames(pmatrix1) = c("Bias", "SD", "MSE",
"Coverage", "Simulation SD")
rownames(pmatrix1) = c("OLS CV MCP", "OLS CV LASSO",
"ILS CV MCP", "ILS CV LASSO",
"Oracle")
# plot(stats$Mtype1 ~ stats$lambda, pch = 1, col = 4, pty = 1, cex = .5)
# points(stats$Ltype1 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$Mtype2 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$Ltype2 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$MFDR ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LFDR ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$MFIR ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LFIR ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
#
# plot(stats$ML1 ~ stats$lambda, pch = 1, col = 4, pty = 1, cex = .5)
# points(stats$LL1 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$ML2 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LL2 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$MXL1 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LXL1 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
# plot(stats$MXL2 ~ stats$lambda, pch = ".", col = 4, pty = 1, cex = 3)
# points(stats$LXL2 ~ stats$lambda, pch = ".", col = 2, pty = 1, cex = 3)
tmp.data = melt(stats[, c(1:4, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(5:8, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
tmp.data = melt(stats[, c(9:14, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(10:12, 14, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(lasso.lam))
tmp.data = melt(stats[, c(15:20, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
tmp.data = melt(stats[, c(16:18, 20, 21)], id = c("lambda"))
ggplot(data = tmp.data, aes(x = lambda, y = value, group = variable)) +
geom_smooth(method = "loess", size = 1.5, aes(colour = variable), size = .5) +
geom_vline(xintercept = mean(mcp.lam))
eval(parse(stat.names))
stat.names
paste(stat.names)
paste(stat.names, sep = ",")
q()
